{
  "version": 3,
  "sources": ["../node_modules/commander/index.js", "../node_modules/word-wrap/index.js", "../node_modules/ms/index.js", "../node_modules/debug/src/common.js", "../node_modules/debug/src/browser.js", "../node_modules/has-flag/index.js", "../node_modules/supports-color/index.js", "../node_modules/debug/src/node.js", "../node_modules/debug/src/index.js", "../src/index.ts", "../src/parser.ts", "../src/api.ts"],
  "sourcesContent": ["/**\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\n// @ts-check\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const args = cmd._helpCommandnameAndArgs.split(/ +/);\n      const helpCommand = cmd.createCommand(args.shift())\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      helpCommand._parseExpectedArgs(args);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      const getSortKey = (option) => {\n        // WYSIWYG for order displayed in help with short before long, no special handling for negated.\n        return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n      };\n      visibleOptions.sort((a, b) => {\n        return getSortKey(a).localeCompare(getSortKey(b));\n      });\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the arguments which have descriptions.\n   *\n   * @param {Command} cmd\n   * @returns {{ term: string, description:string }[]}\n   */\n\n  visibleArguments(cmd) {\n    if (cmd._argsDescription && cmd._args.length) {\n      return cmd._args.map((argument) => {\n        return { term: argument.name, description: cmd._argsDescription[argument.name] || '' };\n      }, 0);\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  };\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  };\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, argument.term.length);\n    }, 0);\n  };\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let parentCmdNames = '';\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n    }\n    return parentCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the command description to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    if (option.negate) {\n      return option.description;\n    }\n    const extraInfo = [];\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined) {\n      extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n    return option.description;\n  };\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    };\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([commandDescription, '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(argument.term, argument.description);\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  };\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Detect manually wrapped and indented strings by searching for line breaks\n    // followed by multiple spaces/tabs.\n    if (str.match(/[\\n]\\s+/)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.substr(0, indent);\n    const columnText = str.substr(indent);\n\n    const indentString = ' '.repeat(indent);\n    const regex = new RegExp('.{1,' + (columnWidth - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line.slice(-1) === '\\n') {\n        line = line.slice(0, line.length - 1);\n      }\n      return ((i > 0) ? indentString : '') + line.trimRight();\n    }).join('\\n');\n  }\n}\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = _parseOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  };\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  };\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg) => {\n      if (!values.includes(arg)) {\n        throw new InvalidOptionArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  };\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  };\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  };\n}\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidOptionArgumentError class\n * @class\n */\nclass InvalidOptionArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidOptionArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidOptionArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    this.commands = [];\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    this._args = [];\n    this.rawArgs = null;\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._storeOptionsAsProperties = false;\n    this._actionResults = [];\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._argsDescription = undefined;\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * Examples:\n   *\n   *      // Command implemented using action handler (description is supplied separately to `.command`)\n   *      program\n   *        .command('clone <source> [destination]')\n   *        .description('clone a repository into a newly created directory')\n   *        .action((source, destination) => {\n   *          console.log('clone command called');\n   *        });\n   *\n   *      // Command implemented using separate executable file (description is second parameter to `.command`)\n   *      program\n   *        .command('start <service>', 'start named service')\n   *        .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const args = nameAndArgs.split(/ +/);\n    const cmd = this.createCommand(args.shift());\n\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n\n    cmd._outputConfiguration = this._outputConfiguration;\n\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._hasHelpOption = this._hasHelpOption;\n    cmd._helpFlags = this._helpFlags;\n    cmd._helpDescription = this._helpDescription;\n    cmd._helpShortFlag = this._helpShortFlag;\n    cmd._helpLongFlag = this._helpLongFlag;\n    cmd._helpCommandName = this._helpCommandName;\n    cmd._helpCommandnameAndArgs = this._helpCommandnameAndArgs;\n    cmd._helpCommandDescription = this._helpCommandDescription;\n    cmd._helpConfiguration = this._helpConfiguration;\n    cmd._exitCallback = this._exitCallback;\n    cmd._storeOptionsAsProperties = this._storeOptionsAsProperties;\n    cmd._combineFlagAndOptionalValue = this._combineFlagAndOptionalValue;\n    cmd._allowExcessArguments = this._allowExcessArguments;\n    cmd._enablePositionalOptions = this._enablePositionalOptions;\n\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    this.commands.push(cmd);\n    cmd._parseExpectedArgs(args);\n    cmd.parent = this;\n\n    if (desc) return this;\n    return cmd;\n  };\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  };\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  };\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *    // functions to change where being written, stdout and stderr\n   *    writeOut(str)\n   *    writeErr(str)\n   *    // matching functions to specify width for wrapping help\n   *    getOutHelpWidth()\n   *    getErrHelpWidth()\n   *    // functions based on what is being written out\n   *    outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');\n\n    // To keep things simple, block automatic name generation for deeply nested executables.\n    // Fail fast and detect when adding rather than later when parsing.\n    function checkExplicitNames(commandArray) {\n      commandArray.forEach((cmd) => {\n        if (cmd._executableHandler && !cmd._executableFile) {\n          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);\n        }\n        checkExplicitNames(cmd.commands);\n      });\n    }\n    checkExplicitNames(cmd.commands);\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  };\n\n  /**\n   * Define argument syntax for the command.\n   */\n\n  arguments(desc) {\n    return this._parseExpectedArgs(desc.split(/ +/));\n  };\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  };\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  };\n\n  /**\n   * Parse expected `args`.\n   *\n   * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n   *\n   * @param {Array} args\n   * @return {Command} `this` command for chaining\n   * @api private\n   */\n\n  _parseExpectedArgs(args) {\n    if (!args.length) return;\n    args.forEach((arg) => {\n      const argDetails = {\n        required: false,\n        name: '',\n        variadic: false\n      };\n\n      switch (arg[0]) {\n        case '<':\n          argDetails.required = true;\n          argDetails.name = arg.slice(1, -1);\n          break;\n        case '[':\n          argDetails.name = arg.slice(1, -1);\n          break;\n      }\n\n      if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n        argDetails.variadic = true;\n        argDetails.name = argDetails.name.slice(0, -3);\n      }\n      if (argDetails.name) {\n        this._args.push(argDetails);\n      }\n    });\n    this._args.forEach((arg, i) => {\n      if (arg.variadic && i < this._args.length - 1) {\n        throw new Error(`only the last argument can be variadic '${arg.name}'`);\n      }\n    });\n    return this;\n  };\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  };\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  };\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * Examples:\n   *\n   *      program\n   *        .command('help')\n   *        .description('display verbose help')\n   *        .action(function() {\n   *           // output help here\n   *        });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      const actionResult = fn.apply(this, actionArgs);\n      // Remember result in case it is async. Assume parseAsync getting called on root.\n      let rootCommand = this;\n      while (rootCommand.parent) {\n        rootCommand = rootCommand.parent;\n      }\n      rootCommand._actionResults.push(actionResult);\n    };\n    this._actionHandler = listener;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  };\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    let defaultValue = option.defaultValue;\n\n    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n      // when --no-foo we make sure default is true, unless a --foo option is already defined\n      if (option.negate) {\n        const positiveLongFlag = option.long.replace(/^--no-/, '--');\n        defaultValue = this._findOption(positiveLongFlag) ? this._getOptionValue(name) : true;\n      }\n      // preassign only if we have a default\n      if (defaultValue !== undefined) {\n        this._setOptionValue(name, defaultValue);\n      }\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // when it's passed assign the value\n    // and conditionally invoke the callback\n    this.on('option:' + oname, (val) => {\n      const oldValue = this._getOptionValue(name);\n\n      // custom processing\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidOptionArgument') {\n            const message = `error: option '${option.flags}' argument '${val}' is invalid. ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        if (oldValue === defaultValue || !Array.isArray(oldValue)) {\n          val = [val];\n        } else {\n          val = oldValue.concat(val);\n        }\n      }\n\n      // unassigned or boolean value\n      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {\n        // if no value, negate false, and we have a default, then use it!\n        if (val == null) {\n          this._setOptionValue(name, option.negate\n            ? false\n            : defaultValue || true);\n        } else {\n          this._setOptionValue(name, val);\n        }\n      } else if (val !== null) {\n        // reassign\n        this._setOptionValue(name, option.negate ? false : val);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *    \"-p, --pepper\"\n   *    \"-p|--pepper\"\n   *    \"-p --pepper\"\n   *\n   * Examples:\n   *\n   *     // simple boolean defaulting to undefined\n   *     program.option('-p, --pepper', 'add pepper');\n   *\n   *     program.pepper\n   *     // => undefined\n   *\n   *     --pepper\n   *     program.pepper\n   *     // => true\n   *\n   *     // simple boolean defaulting to true (unless non-negated option is also defined)\n   *     program.option('-C, --no-cheese', 'remove cheese');\n   *\n   *     program.cheese\n   *     // => true\n   *\n   *     --no-cheese\n   *     program.cheese\n   *     // => false\n   *\n   *     // required argument\n   *     program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   *     --chdir /tmp\n   *     program.chdir\n   *     // => \"/tmp\"\n   *\n   *     // optional argument\n   *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  };\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  };\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * Examples:\n   *\n   *    // for `.option('-f,--flag [value]'):\n   *    .combineFlagAndOptionalValue(true)  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   *    .combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  };\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  };\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  };\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  };\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionOptions for parent command(s)');\n    }\n    return this;\n  };\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  };\n\n  /**\n   * Store option value\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @api private\n   */\n\n  _setOptionValue(key, value) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n  };\n\n  /**\n   * Retrieve option value\n   *\n   * @param {string} key\n   * @return {Object} value\n   * @api private\n   */\n\n  _getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  };\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * Examples:\n   *\n   *      program.parse(process.argv);\n   *      program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   *      program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n    // @ts-ignore: unknown property\n    if (!this._scriptPath && process.mainModule) {\n      // @ts-ignore: unknown property\n      this._scriptPath = process.mainModule.filename;\n    }\n\n    // Guess name, used in usage in help.\n    this._name = this._name || (this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath)));\n\n    // Let's go!\n    this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * Examples:\n   *\n   *      program.parseAsync(process.argv);\n   *      program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   *      program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  parseAsync(argv, parseOptions) {\n    this.parse(argv, parseOptions);\n    return Promise.all(this._actionResults).then(() => this);\n  };\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs'];\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n\n    // Want the entry script as the reference for command name and directory for searching for other files.\n    let scriptPath = this._scriptPath;\n    // Fallback in case not set, due to how Command created or called.\n    // @ts-ignore: unknown property\n    if (!scriptPath && process.mainModule) {\n      // @ts-ignore: unknown property\n      scriptPath = process.mainModule.filename;\n    }\n\n    let baseDir;\n    try {\n      const resolvedLink = fs.realpathSync(scriptPath);\n      baseDir = path.dirname(resolvedLink);\n    } catch (e) {\n      baseDir = '.'; // dummy, probably not going to find executable!\n    }\n\n    // name of the subcommand, like `pm-install`\n    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;\n    if (subcommand._executableFile) {\n      bin = subcommand._executableFile;\n    }\n\n    const localBin = path.join(baseDir, bin);\n    if (fs.existsSync(localBin)) {\n      // prefer local `./<bin>` to bin in the $PATH\n      bin = localBin;\n    } else {\n      // Look for source files.\n      sourceExt.forEach((ext) => {\n        if (fs.existsSync(`${localBin}${ext}`)) {\n          bin = `${localBin}${ext}`;\n        }\n      });\n    }\n    launchWithNode = sourceExt.includes(path.extname(bin));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(bin);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(bin, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n    signals.forEach((signal) => {\n      // @ts-ignore\n      process.on(signal, () => {\n        if (proc.killed === false && proc.exitCode === null) {\n          proc.kill(signal);\n        }\n      });\n    });\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableMissing = `'${bin}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${bin}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  };\n\n  /**\n   * @api private\n   */\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    if (subCommand._executableHandler) {\n      this._executeSubCommand(subCommand, operands.concat(unknown));\n    } else {\n      subCommand._parseCommand(operands, unknown);\n    }\n  };\n\n  /**\n   * Process arguments in context of this command.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    } else if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      } else {\n        this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n      }\n    } else if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    } else {\n      if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n        // probably missing subcommand and no handler, user needs help\n        this.help({ error: true });\n      }\n\n      outputHelpIfRequested(this, parsed.unknown);\n      this._checkForMissingMandatoryOptions();\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n\n      const commandEvent = `command:${this.name()}`;\n      if (this._actionHandler) {\n        // Check expected arguments and collect variadic together.\n        const args = this.args.slice();\n        this._args.forEach((arg, i) => {\n          if (arg.required && args[i] == null) {\n            this.missingArgument(arg.name);\n          } else if (arg.variadic) {\n            args[i] = args.splice(i);\n            args.length = Math.min(i + 1, args.length);\n          }\n        });\n        if (args.length > this._args.length) {\n          this._excessArguments(args);\n        }\n\n        this._actionHandler(args);\n        if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy\n      } else if (this.parent && this.parent.listenerCount(commandEvent)) {\n        this.parent.emit(commandEvent, operands, unknown); // legacy\n      } else if (operands.length) {\n        if (this._findCommand('*')) { // legacy\n          this._dispatchSubcommand('*', operands, unknown);\n        } else if (this.listenerCount('command:*')) {\n          this.emit('command:*', operands, unknown);\n        } else if (this.commands.length) {\n          this.unknownCommand();\n        }\n      } else if (this.commands.length) {\n        // This command has subcommands and nothing hooked up at this level, so display help.\n        this.help({ error: true });\n      } else {\n        // fall through for caller to handle after calling .parse()\n      }\n    }\n  };\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  };\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  };\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Lazy calling after checking for help flags from leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd._getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  };\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *    argv => operands, unknown\n   *    --known kkk op => [op], []\n   *    op --known kkk => [op], []\n   *    sub --unknown uuu op => [sub], [--unknown uuu op]\n   *    sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  };\n\n  /**\n   * Return an object containing options as key-value pairs\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  };\n\n  /**\n   * Internal bottleneck for handling of parsing errors.\n   *\n   * @api private\n   */\n  _displayError(exitCode, code, message) {\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this._displayError(1, 'commander.missingArgument', message);\n  };\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this._displayError(1, 'commander.optionMissingArgument', message);\n  };\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this._displayError(1, 'commander.missingMandatoryOptionValue', message);\n  };\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    const message = `error: unknown option '${flag}'`;\n    this._displayError(1, 'commander.unknownOption', message);\n  };\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this._displayError(1, 'commander.excessArguments', message);\n  };\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const partCommands = [this.name()];\n    for (let parentCmd = this.parent; parentCmd; parentCmd = parentCmd.parent) {\n      partCommands.unshift(parentCmd.name());\n    }\n    const fullCommand = partCommands.join(' ');\n    const message = `error: unknown command '${this.args[0]}'.` +\n      (this._hasHelpOption ? ` See '${fullCommand} ${this._helpLongFlag}'.` : '');\n    this._displayError(1, 'commander.unknownCommand', message);\n  };\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  };\n\n  /**\n   * Set the description to `str`.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    this._argsDescription = argsDescription;\n    return this;\n  };\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  };\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  };\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  };\n\n  /**\n   * Get or set the name of the command\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  };\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  };\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    const groupListeners = [];\n    let command = this;\n    while (command) {\n      groupListeners.push(command); // ordered from current command to root\n      command = command.parent;\n    }\n\n    groupListeners.slice().reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    groupListeners.forEach(command => command.emit('afterAllHelp', context));\n  };\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = _parseOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  };\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  };\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n};\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.CommanderError = CommanderError;\nexports.InvalidOptionArgumentError = InvalidOptionArgumentError;\nexports.Help = Help;\n\n/**\n * Camel-case the given `flag`\n *\n * @param {string} flag\n * @return {string}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\n/**\n * Parse the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction _parseOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n", "/*!\n * word-wrap <https://github.com/jonschlinkert/word-wrap>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nmodule.exports = function(str, options) {\n  options = options || {};\n  if (str == null) {\n    return str;\n  }\n\n  var width = options.width || 50;\n  var indent = (typeof options.indent === 'string')\n    ? options.indent\n    : '  ';\n\n  var newline = options.newline || '\\n' + indent;\n  var escape = typeof options.escape === 'function'\n    ? options.escape\n    : identity;\n\n  var regexString = '.{1,' + width + '}';\n  if (options.cut !== true) {\n    regexString += '([\\\\s\\u200B]+|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]+|$)';\n  }\n\n  var re = new RegExp(regexString, 'g');\n  var lines = str.match(re) || [];\n  var result = indent + lines.map(function(line) {\n    if (line.slice(-1) === '\\n') {\n      line = line.slice(0, line.length - 1);\n    }\n    return escape(line);\n  }).join(newline);\n\n  if (options.trim === true) {\n    result = result.replace(/[ \\t]*$/gm, '');\n  }\n  return result;\n};\n\nfunction identity(str) {\n  return str;\n}\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n", "'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n", "/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n", "/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n", "import { program } from \"commander\";\nimport { parse } from \"./parser\";\nimport * as fs from \"fs/promises\";\nimport * as path from \"path\";\n\nif (process.env.NODE_ENV === \"development\") {\n  const sourceMapSupport = require(\"source-map-support\");\n  sourceMapSupport.install();\n}\n\nprogram.name(\"dts-google-apps-script-advanced\");\n\n// Download command does not work without session cookies\n/*\nprogram\n  .command(\"download [destination]\")\n  .description(\"download API definitions to destination directory\")\n  .action((destination: string = \"definitions\") => {\n    console.log(`Download API definitions to ${destination}`);\n    download(destination);\n  });\n  */\n\nprogram.command(\"parse <jsonFile>\").action(async (jsonFile: string) => {\n  try {\n    const definition = await parse(jsonFile);\n    console.log(definition);\n  } catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n});\n\nprogram\n  .command(\"convert <jsonFiles...>\")\n  .description(\"convert API definitions from json files to destination directory\")\n  .option(\"-o, --output <outputDir>\", \"Output directory\")\n  .action(async (jsonFiles: string[], { output }: { output: string }) => {\n    const promises = jsonFiles.map(\n      async (jsonFile: string, index: number): Promise<void> => {\n        console.log(`${index + 1}: Converting ${jsonFile}`);\n        const outputFile = path.join(output, path.basename(jsonFile, \".json\") + \".d.ts\");\n        let definition = [\n          \"// Type definitions for Google Apps Script 2021-02-11\",\n          \"// Project: https://developers.google.com/apps-script/\",\n          \"// Generator: https://github.com/mtgto/dts-google-apps-script-advanced\",\n          \"// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\",\n          \"\",\n          \"\",\n        ].join(\"\\n\");\n        definition += await parse(jsonFile);\n        await fs.writeFile(outputFile, definition);\n      }\n    );\n    try {\n      await Promise.all(promises);\n    } catch (error) {\n      console.error(error);\n      process.exit(1);\n    }\n  });\n\nprogram.parse();\n", "import { readFile } from \"fs/promises\";\nimport { definitions } from \"./api\";\nimport wordwrap from \"word-wrap\";\nimport debug from \"debug\";\n\nconst tabWidth = 4; // defined prettierrc.json in DefinitelyTyped.\n\ntype Dict = { [key: string]: any };\n\n/// Namespace\nclass Namespace {\n  readonly package: ReadonlyArray<string>;\n  readonly children: Namespace[];\n  readonly interfaces: Interface[];\n\n  constructor(fullname: string) {\n    this.package = fullname.split(\".\");\n    this.children = [];\n    this.interfaces = [];\n  }\n\n  get name(): string {\n    return this.package[this.package.length - 1];\n  }\n\n  add = (i: Interface) => {\n    if (this.package.length + 1 === i.package.length) {\n      this.interfaces.push(i);\n    } else if (this.package.length + 1 < i.package.length) {\n      const childName = i.package[this.package.length];\n      debug(`[DEBUG] childName=${childName}, fullname=${i.package.join(\".\")}, children = ${this.children.map((c) => c.name)}`);\n      let child = this.children.find((child) => child.name === childName);\n      if (!child) {\n        child = new Namespace([...this.package, childName].join(\".\"));\n        this.children.push(child);\n      }\n      child.add(i);\n    }\n  };\n\n  toString = (depth: number = 0): string => {\n    let output = depth === 0 ? \"declare \" : \"\";\n    output += \" \".repeat(tabWidth * depth);\n    output += \"namespace \" + this.name + \" {\\n\";\n    this.children.forEach((child) => {\n      output += child.toString(depth + 1);\n    });\n    this.interfaces.forEach((i) => {\n      output += i.toString(depth + 1);\n    });\n    output += \" \".repeat(tabWidth * depth) + \"}\\n\";\n\n    return output;\n  };\n}\n\nclass Interface {\n  readonly package: ReadonlyArray<string>;\n  readonly fields: ReadonlyArray<Field>;\n  readonly methods: ReadonlyArray<Method>;\n  readonly comment: Comment | undefined;\n\n  constructor(fullname: string, fields: Field[], methods: Method[], comment: Comment | undefined) {\n    this.package = fullname.split(\".\");\n    this.fields = fields;\n    this.methods = methods;\n    this.comment = comment;\n  }\n\n  get name(): string {\n    return this.package[this.package.length - 1];\n  }\n\n  toString = (depth: number = 0): string => {\n    const indent = \" \".repeat(tabWidth * depth);\n    let output = \"\";\n    if (this.comment) {\n      output += this.comment.toString(depth);\n    }\n    output += indent + \"interface \" + this.name + \" {\\n\";\n    this.fields.forEach((field) => {\n      output += field.toString(depth + 1);\n    });\n    this.methods.forEach((method) => {\n      output += method.toString(depth + 1);\n    });\n    output += indent + \"}\\n\";\n    return output;\n  };\n}\n\nclass Method {\n  readonly name: string;\n  readonly returnTypeName: string;\n  readonly args: Field[];\n  readonly comment: Comment | undefined;\n\n  constructor(name: string, returnTypeName: string, args: Field[], comment: Comment | undefined) {\n    this.name = name;\n    this.returnTypeName = returnTypeName;\n    this.args = args;\n    this.comment = comment;\n  }\n\n  toString = (depth: number): string => {\n    const indent = \" \".repeat(tabWidth * depth);\n    let output = \"\";\n    if (this.comment) {\n      output += this.comment.toString(depth);\n    }\n    output += indent + this.name + \"(\";\n    output += this.args.map((arg) => `${arg.name}: ${arg.typeName}`).join(\", \");\n    output += `): ${this.returnTypeName};\\n`;\n    return output;\n  };\n}\n\nclass Field {\n  readonly name: string;\n  readonly typeName: string;\n  readonly comment: Comment | undefined;\n\n  constructor(name: string, typeName: string, comment: Comment | undefined) {\n    this.name = name;\n    this.typeName = typeName;\n    this.comment = comment;\n  }\n\n  toString = (depth: number): string => {\n    const indent = \" \".repeat(tabWidth * depth);\n    let output = \"\";\n    if (this.comment) {\n      output += this.comment.toString(depth);\n    }\n    output += indent + this.name + \"?: \" + this.typeName + \";\\n\";\n    return output;\n  };\n}\n\nclass Comment {\n  readonly comment: string;\n\n  constructor(comment: string) {\n    this.comment = comment;\n  }\n\n  toString = (depth: number): string => {\n    return wordwrap(this.comment, { indent: \"\", width: 120 })\n      .split(\"\\n\")\n      .map((line) => (\" \".repeat(tabWidth * depth) + \"// \" + line).trimEnd() + \"\\n\")\n      .join(\"\");\n  };\n}\n\nconst normalizeVariableName = (varName: string): string => {\n  return varName.replace(/(\\w+)-(\\w)(\\w+)/, (_match, former, char, latter) => former + char.toUpperCase() + latter);\n};\n\n// Unknown types which defined in automatic macros\nconst unknownTypeNames: { [unknownName: string]: string } = {\n  \"Area120tables.V1alpha1.Schema.Empty\": \"any\",\n  \"Bigquery.V2.Schema.JsonObject\": \"any\",\n  \"Classroom.V1.Schema.Empty\": \"void\",\n  \"Classroom.V1.Schema.ReclaimStudentSubmissionRequest\": \"any\",\n  \"Classroom.V1.Schema.ReturnStudentSubmissionRequest\": \"any\",\n  \"Classroom.V1.Schema.TurnInStudentSubmissionRequest\": \"any\",\n  \"Docs.V1.Schema.EmbeddedDrawingProperties\": \"any\",\n  \"Docs.V1.Schema.EmbeddedDrawingPropertiesSuggestionState\": \"any\",\n  \"Driveactivity.V2.Schema.Administrator\": \"any\",\n  \"Driveactivity.V2.Schema.AnonymousUser\": \"any\",\n  \"Driveactivity.V2.Schema.Anyone\": \"any\",\n  \"Driveactivity.V2.Schema.DeletedUser\": \"any\",\n  \"Driveactivity.V2.Schema.DriveFile\": \"any\",\n  \"Driveactivity.V2.Schema.Edit\": \"any\",\n  \"Driveactivity.V2.Schema.File\": \"any\",\n  \"Driveactivity.V2.Schema.Legacy\": \"any\",\n  \"Driveactivity.V2.Schema.NoConsolidation\": \"any\",\n  \"Driveactivity.V2.Schema.New\": \"any\",\n  \"Driveactivity.V2.Schema.UnknownUser\": \"any\",\n  \"Driveactivity.V2.Schema.Upload\": \"any\",\n  \"Licensing.V1.Schema.Empty\": \"void\",\n  \"Peopleapi.V1.Schema.Empty\": \"void\",\n  \"Sheets.V4.Schema.ClearValuesRequest\": \"any\",\n  \"Youtube.V3.Schema.TokenPagination\": \"any\",\n  \"Youtube.V3.Schema.TestItemTestItemSnippet\": \"any\",\n  \"Youtube.V3.Schema.VideoProjectDetails\": \"any\",\n  \"YoutubePartner.V1.Schema.Empty\": \"void\",\n};\n\n/**\n * Convert package name from autocomplete macros format.\n *\n * Example:\n * \"Admin_directory_v1.Admin.Directory_v1.Collection\" => \"AdminDirectory.Collection\"\n * \"Admin.Directory_v1.Schema.Channel\" => \"Schema.Channel\"\n */\nexport const normalizePackageName = (packageName: string, abbreviateApiName: boolean): string | undefined => {\n  for (const definition of definitions) {\n    if (packageName === definition.innerName) {\n      return definition.id;\n    } else {\n      const word = `${definition.innerName}.${definition.abbreviatedName}`;\n      if (packageName.startsWith(word)) {\n        return packageName.replace(word, abbreviateApiName ? \"\" : definition.id + \".\");\n      } else if (packageName.startsWith(definition.abbreviatedName)) {\n        return packageName.replace(definition.abbreviatedName, \"\");\n      }\n    }\n  }\n  return undefined;\n};\n\nconst normalizeTypeName = (typeName: string, abbreviateApiName: boolean): string => {\n  if (typeName === \"void\" || typeName === \"Integer\" || typeName === \"Integer[]\" || typeName === \"Byte[]\") {\n    return typeName;\n  } else if (typeName === \"Number\") {\n    return \"number\";\n  } else if (typeName === \"Number[]\") {\n    return \"number[]\";\n  } else if (typeName === \"String\") {\n    return \"string\";\n  } else if (typeName === \"String[]\") {\n    return \"string[]\";\n  } else if (typeName === \"String[][]\") {\n    return \"string[][]\";\n  } else if (typeName === \"Boolean\") {\n    return \"boolean\";\n  } else if (typeName === \"Boolean[]\") {\n    return \"boolean[]\";\n  } else if (typeName === \"Object\") {\n    return \"object\";\n  } else if (typeName === \"Object[]\") {\n    return \"object[]\";\n  } else if (typeName === \"Object[][]\") {\n    return \"object[][]\";\n  } else if (typeName === \"Blob\") {\n    return \"Base.Blob\";\n  } else {\n    const converted = unknownTypeNames[typeName];\n    if (converted) {\n      return converted;\n    }\n  }\n  const normalizedName = normalizePackageName(typeName, abbreviateApiName);\n  if (normalizedName) {\n    return normalizedName;\n  } else {\n    throw new Error(`${typeName} is not registered in package names`);\n  }\n};\n\nexport const parseHierarchy = (obj: Dict): Interface => {\n  const interfaceName = normalizeTypeName(obj[\"1\"], false);\n  const isApiName = definitions.some(definition => definition.id === interfaceName);\n  const fields: Field[] = (obj[\"2\"] ?? []).map(\n    (field: Dict): Field => {\n      let name: string = field[\"1\"];\n      if (name.includes(\"-\")) {\n        name = `\"${name}\"`;\n      }\n      const typeName = normalizeTypeName(field[\"2\"], !isApiName);\n      const comment = field[\"6\"] ? new Comment(field[\"6\"]) : undefined;\n      return new Field(name, typeName, comment);\n    }\n  );\n  const methods = (obj[\"3\"] ?? []).map(\n    (method: Dict): Method => {\n      const name = normalizeVariableName(method[\"1\"]);\n      const returnTypeName = normalizeTypeName(method[\"2\"], !isApiName);\n      const args = (method[\"3\"] ?? []).map((field: Dict) => {\n        const name = normalizeVariableName(field[\"1\"]);\n        const typeName = normalizeTypeName(field[\"2\"], !isApiName);\n        const comment = field[\"6\"] ? new Comment(field[\"6\"]) : undefined;\n        return new Field(name, typeName, comment);\n      });\n      const comment = method[\"6\"] ? new Comment(method[\"6\"]) : undefined;\n      return new Method(name, returnTypeName, args, comment);\n    }\n  );\n  const comment = obj[\"6\"] ? new Comment(obj[\"6\"]) : undefined;\n  return new Interface(`GoogleAppsScript.${interfaceName}`, fields, methods, comment);\n};\n\nexport const parse = async (filename: string): Promise<string> => {\n  const json = await readFile(filename);\n  const dict: Dict = JSON.parse(json.toString());\n  const root = new Namespace(\"GoogleAppsScript\");\n  // Main\n  const main = parseHierarchy(dict[\"1\"]);\n  root.add(main);\n  // classes\n  dict[\"2\"].forEach((cls: Dict) => {\n    root.add(parseHierarchy(cls));\n  });\n\n  let output = \"\";\n  if ([\"\"].includes(main.name)) {\n    output += \"/// <reference path=\\\"../google-apps-script.base.d.ts\\\" />\\n\\n\";\n  }\n  output += root.toString(0);\n  output += `declare const ${main.name}: GoogleAppsScript.${main.name};\\n`;\n  return output;\n};\n", "// Advanced API definition\nexport interface APIDefinition {\n  /// Default variable name\n  readonly id: string;\n  /// JSON for Autocomplete macros\n  readonly url: string;\n  readonly innerName: string;\n  readonly abbreviatedName: string;\n}\n\nexport const definitions: APIDefinition[] = [\n  {\n    id: \"AdSense\",\n    innerName: \"Adsense_v1_4\",\n    abbreviatedName: \"Adsense.V1_4.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/adsense/v1.4\",\n  },\n  {\n    id: \"AdminDirectory\",\n    innerName: \"Admin_directory_v1\",\n    abbreviatedName: \"Admin.Directory_v1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/admin/directory_v1\",\n  },\n  {\n    id: \"AdminReports\",\n    innerName: \"Admin_reports_v1\",\n    abbreviatedName: \"Admin.Reports_v1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/admin/reports_v1\",\n  },\n  {\n    id: \"AnalyticsReporting\",\n    innerName: \"Analyticsreporting_v4\",\n    abbreviatedName: \"Analyticsreporting.V4.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/analyticsreporting/v4\",\n  },\n  {\n    id: \"Area120Tables\",\n    innerName: \"Area120tables_v1alpha1\",\n    abbreviatedName: \"Area120tables.V1alpha1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/area120tables/v1alpha1\",\n  },\n  {\n    id: \"BigQuery\",\n    innerName: \"Bigquery_v2\",\n    abbreviatedName: \"Bigquery.V2.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/bigquery/v2\",\n  },\n  {\n    id: \"Calendar\",\n    innerName: \"Calendar_v3\",\n    abbreviatedName: \"Calendar.V3.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/calendar/v3\",\n  },\n  {\n    id: \"DoubleClickCampaigns\",\n    innerName: \"Dfareporting_v3_4\",\n    abbreviatedName: \"Dfareporting.V3_4.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/dfareporting/v3.4\",\n  },\n  {\n    id: \"ShoppingContent\",\n    innerName: \"Content_v2\",\n    abbreviatedName: \"Content.V2.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/content/v2\",\n  },\n  {\n    id: \"Drive\",\n    innerName: \"Drive_v2\",\n    abbreviatedName: \"Drive.V2.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/drive/v2\",\n  },\n  {\n    id: \"DriveActivity\",\n    innerName: \"Driveactivity_v2\",\n    abbreviatedName: \"Driveactivity.V2.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/driveactivity/v2\",\n  },\n  {\n    id: \"AdminLicenseManager\",\n    innerName: \"Licensing_v1\",\n    abbreviatedName: \"Licensing.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/licensing/v1\",\n  },\n  {\n    id: \"Gmail\",\n    innerName: \"Gmail_v1\",\n    abbreviatedName: \"Gmail.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/gmail/v1\",\n  },\n  {\n    id: \"Analytics\",\n    innerName: \"Analytics_v3\",\n    abbreviatedName: \"Analytics.V3.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/analytics/v3\",\n  },\n  {\n    id: \"Classroom\",\n    innerName: \"Classroom_v1\",\n    abbreviatedName: \"Classroom.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/classroom/v1\",\n  },\n  {\n    id: \"Docs\",\n    innerName: \"Docs_v1\",\n    abbreviatedName: \"Docs.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/docs/v1\",\n  },\n  {\n    id: \"Sheets\",\n    innerName: \"Sheets_v4\",\n    abbreviatedName: \"Sheets.V4.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/sheets/v4\",\n  },\n  {\n    id: \"Slides\",\n    innerName: \"Slides_v1\",\n    abbreviatedName: \"Slides.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/slides/v1\",\n  },\n  {\n    id: \"AdminReseller\",\n    innerName: \"Reseller_v1\",\n    abbreviatedName: \"Reseller.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/reseller/v1\",\n  },\n  {\n    id: \"AdminGroupsMigration\",\n    innerName: \"Groupsmigration_v1\",\n    abbreviatedName: \"Groupsmigration.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/groupsmigration/v1\",\n  },\n  {\n    id: \"AdminGroupsSettings\",\n    innerName: \"Groupssettings_v1\",\n    abbreviatedName: \"Groupssettings.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/groupssettings/v1\",\n  },\n  {\n    id: \"Mirror\",\n    innerName: \"==== NOT FOUND ====\",\n    abbreviatedName: \"==== NOT FOUND ====\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/mirror/v1\",\n  },\n  {\n    id: \"People\",\n    innerName: \"Peopleapi_v1\",\n    abbreviatedName: \"Peopleapi.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/peopleapi/v1\",\n  },\n  {\n    id: \"TagManager\",\n    innerName: \"Tagmanager_v2\",\n    abbreviatedName: \"Tagmanager.V2.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/tagmanager/v2\",\n  },\n  {\n    id: \"Tasks\",\n    innerName: \"Tasks_v1\",\n    abbreviatedName: \"Tasks.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/tasks/v1\",\n  },\n  {\n    id: \"YouTubeAnalytics\",\n    innerName: \"YoutubeAnalytics_v2\",\n    abbreviatedName: \"YoutubeAnalytics.V2.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/youtubeAnalytics/v2\",\n  },\n  {\n    id: \"YouTubeContentId\",\n    innerName: \"YoutubePartner_v1\",\n    abbreviatedName: \"YoutubePartner.V1.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/youtubePartner/v1\",\n  },\n  {\n    id: \"YouTube\",\n    innerName: \"Youtube_v3\",\n    abbreviatedName: \"Youtube.V3.\",\n    url: \"https://script.google.com/macros/autocomplete/dep/apiary/youtube/v3\",\n  },\n];\n"],
  "mappings": "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",
  "names": []
}
